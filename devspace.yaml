version: v2beta1
name: kind-practice

vars:
  POSTGRES_PASSWORD: postgres

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all    # 2. Ensure pull secrets
      create_deployments database  # 3. Deploy database
      create_deployments api       # 4. Deploy API
  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all    # 2. Ensure pull secrets
      create_deployments database  # 3. Deploy database
      create_deployments api       # 4. Deploy API

# This is a list of `images` that DevSpace can build for this project
images:
  api:
    image: ajp-api
    dockerfile: ./Dockerfile.api
    skipPush: true

# This is a list of `deployments` that DevSpace can create for this project
deployments:
  database:
    # This deployment uses `kubectl` but you can also define `helm` deployments
    kubectl:
      manifests:
        - postgres-deployment.yaml
        - postgres-service.yaml
        - flyway-pvc.yaml
        - flyway-deployment.yaml

  api:
    kubectl:
      manifests:
        - api-deployment.yaml

# This is a list of `dev` containers that are based on the containers created by your deployments
dev:
  # app:
  #   # Search for the container that runs this image
  #   imageSelector: username/app
  #   # Replace the container image with this dev-optimized image (allows to skip image building during development)
  #   devImage: ghcr.io/loft-sh/devspace-containers/dotnet:7.0-alpine
  #   # Sync files between the local filesystem and the development container
  #   sync:
  #     - path: ./
  #   # Open a terminal and use the following command to start it
  #   terminal:
  #     command: ./devspace_start.sh
  #   # Inject a lightweight SSH server into the container (so your IDE can connect to the remote dev env)
  #   ssh:
  #     enabled: true
  #   # Make the following commands from my local machine available inside the dev container
  #   proxyCommands:
  #     - command: devspace
  #     - command: kubectl
  #     - command: helm
  #     - gitCredentials: true
  #   # Forward the following ports to be able access your application via localhost
  #   ports:
  #     - port: "5186"
  #     - port: "8080"
  #   # Environment variables for your development container
  #   env:
  #     - name: ConnectionStrings__DefaultConnection
  #       value: "Host=postgres;Port=5432;Database=ajp_db;Username=postgres;Password=${POSTGRES_PASSWORD}"
  #   # Open the following URLs once they return an HTTP status code other than 502 or 503
  #   open:
  #     - url: http://localhost:8080

  postgres:
    labelSelector:
      app.kubernetes.io/component: postgres
    ports:
      - port: "5432"

  api:
    labelSelector:
      app.kubernetes.io/component: api
    ports:
      - port: "8080:80"

# Use the `commands` section to define repeatable dev workflows for this project
commands:
  migrate-db:
    command: |-
      echo "Running Flyway migrations..."
      FLYWAY_POD=$(kubectl get pods -l app.kubernetes.io/component=flyway -o jsonpath='{.items[0].metadata.name}')
      if [ -z "$FLYWAY_POD" ]; then
        echo "Flyway pod not found. Please make sure the deployment is running."
        exit 1
      fi

      POSTGRES_POD=$(kubectl get pods -l app.kubernetes.io/component=postgres -o jsonpath='{.items[0].metadata.name}')
      if [ -z "$POSTGRES_POD" ]; then
        echo "PostgreSQL pod not found. Please make sure the deployment is running."
        exit 1
      fi

      # Copy migrations to the Flyway pod
      echo "Copying migrations to Flyway pod..."
      ./copy-migrations.sh

      echo "Applying migrations to database..."

      # Let's use the fixed migration next time
      kubectl exec $FLYWAY_POD -- rm /flyway/sql/V20250921004500__add_comprehensive_test_data.sql

      # Apply the migrations
      kubectl exec $FLYWAY_POD -- flyway -url=jdbc:postgresql://postgres:5432/ajp_db -user=postgres -password=${POSTGRES_PASSWORD} -outOfOrder=true migrate

      echo "Migration complete!"

  create-migration:
    command: |-
      if [ -z "$1" ]; then
        echo "Error: Migration name is required."
        echo "Usage: devspace run create-migration <migration_name>"
        exit 1
      fi

      MIGRATION_NAME=$1
      TIMESTAMP=$(date +%Y%m%d%H%M%S)
      FILENAME="V${TIMESTAMP}__${MIGRATION_NAME}.sql"

      echo "Creating new migration: $FILENAME"
      mkdir -p migrations
      touch "migrations/${FILENAME}"

      echo "-- Migration: ${MIGRATION_NAME}" > "migrations/${FILENAME}"
      echo "-- Created: $(date)" >> "migrations/${FILENAME}"
      echo "" >> "migrations/${FILENAME}"
      echo "-- Write your SQL migration statements here" >> "migrations/${FILENAME}"

      echo "Migration file created: migrations/${FILENAME}"
      echo "After adding your SQL statements, run:"
      echo "devspace run migrate-db"

  db-info:
    command: |-
      echo "Getting database migration info..."
      FLYWAY_POD=$(kubectl get pods -l app.kubernetes.io/component=flyway -o jsonpath='{.items[0].metadata.name}')
      if [ -z "$FLYWAY_POD" ]; then
        echo "Flyway pod not found. Please make sure the deployment is running."
        exit 1
      fi

      kubectl exec $FLYWAY_POD -- flyway -url=jdbc:postgresql://postgres:5432/ajp_db -user=postgres -password=${POSTGRES_PASSWORD} info

  build-api:
    command: |-
      echo "Building API image..."
      devspace build -t api

  deploy-api:
    command: |-
      echo "Deploying API..."
      devspace deploy api

      echo "Waiting for API pod to be ready..."
      kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=api --timeout=60s

      echo "API deployed successfully!"
      echo "Access the API at: http://localhost:8080"

hooks:
  - name: "Database Setup"
    events: ["after:deploy:database"]
    command: |-
      echo "Waiting for PostgreSQL to be ready..."
      kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=postgres --timeout=60s

      echo "Waiting for Flyway to be ready..."
      kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=flyway --timeout=60s

      echo "Running initial database setup..."
      devspace run migrate-db

  - name: "API Setup"
    events: ["after:deploy:api"]
    command: |-
      echo "API deployed successfully!"
      echo "Access the API at: http://localhost:8080"

# Define dependencies to other projects with a devspace.yaml
# dependencies:
#   api:
#     git: https://...  # Git-based dependencies
#     tag: v1.0.0
#   ui:
#     path: ./ui        # Path-based dependencies (for monorepos)
